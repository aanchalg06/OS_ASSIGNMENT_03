#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#define forks 5

//@https://stackoverflow.com/questions/29050328/pthread-join-function-in-c
//https://medium.com/@jinghua.shih/operating-system-the-dining-philosophers-problem-6f35f210a4e2


pthread_t philosopher[5];
pthread_mutex_t fork_eat[forks];

int initialization(int i);
int creation(int i);
int join(int i);
void eating(int n);
void finished(int n);
void eat_finish(int n);


int main()
{
  // Initialise the semaphore array
  for (int i=0;i<5;i++)
  {
    int ans= initialization(i);
    if(ans == -1){
        printf("Error in mutex");
        return 0;
    }
  }

  // Run the philosopher Threads using *eat_finish() function
  for (int i=0;i<5;i++)
  {
    int ans= creation(i);
    if (ans==-1){
        printf("Error in create");
        return 0;
    }
  }

  // Wait for all philosophers threads to complete executing (finish dining) before closing the program
  for (int i=0;i<5;i++)
  {
    int ans= join(i);
    if(ans==-1){
        printf("Error in join");
        return 0;
    }
  }

  return 0;
}
 

int initialization(int i){
    int ans= pthread_mutex_init(&fork_eat[i], NULL);
    return ans;
}

//@ https://stackoverflow.com/questions/57811500/passing-argument-as-int-to-thread-warning-cast-to-pointer-from-integer-differ

// int data = 999; // the integer  
// int* pointer =  &data; // the pointer

// pointer = data; // the conversion

int creation(int i){
    int* ptr= &i;
    ptr= i;
    int ans= pthread_create(&philosopher[i], NULL, (void *)eat_finish, (int *)ptr);
    return ans;
}

int join(int i){
    void *msg;
    int ans=pthread_join(philosopher[i], &msg);
    return ans;
}

void eating(int n){
  //@ https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/

  // left fork
  pthread_mutex_lock(&fork_eat[n]);

  // right fork
  pthread_mutex_lock(&fork_eat[(n + 1)%5]);

  printf("\nPhilosopher % d is eating ", n);
}

void finished(int n){

  pthread_mutex_unlock(&fork_eat[n]);
  pthread_mutex_unlock(&fork_eat[(n + 1) % forks]);

  printf("\nPhilosopher % d Finished eating ", n);
}

void eat_finish(int n)
{
    eating(n);
    finished(n);  
}
